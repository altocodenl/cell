Eighteenth episode of season 3! I'm building a programming environment from scratch while recording myself. Today, I just showed up but somehow a great concept landed in our lap. Send lists over the wire and execute them in temp. You are saying "remote code execution" like it's a bad thing.

https://github.com/altocodenl/cell

TODO:
- Make cell.call make an entry on the dialog [DONE]
- Make cell.call support @ do
- Upload as call
   - Make it an internal call
   - Send a lambda call that does two things: 1) upload the file; 2) if data is not empty, set a link to it somewhere in the dataspace (name suggested by the llm).
   - Convention: if you send a lambda (@ do) over the wire, you want us to call it.

Two ways to go about it:
1: Send a lambda and also a message.
2: Just send the things you want to do, with the messages already built in.

For 2, just send a list.

1 @ upload file ...
           ...
2 @ set p civ2data
        v @ file civ2 data

How would the list be executed?

Before that, why do we need a special command? We want this list to be stored only in the dialog. That's what the entry is asking for. Just put this stuff in the dialog, and expand it.

However, we don't expand the stuff that goes in the dialog. So we need to run it.

A lazy way to do it: put it in a temporary key that is free: wait until all things are resolved. Then copy the result to the dialog and delete the key.

We can do it with just a list! If we send a list, we are going to put it in /tmp-dddd. Then we wait until things settle. Then we take the entire list (together with : and =) and put it in the dialog. End of story.

- The put will not create a dialog entry.
- Read the value back when the put is done (which is easy, because it runs synchronously).
- Put it in the dialog.
- Delete /tmp-dddd

Fun stuff: this list can even refer itself, without you knowing where it is in /tmp-dddd. You can actually do anything! You can define calls, do a lot of things, and it will all just happen. It's just another mechanism for running code that's the same mechanism as everywhere else. If you put an access mask around it, you have remote code execution, really. This is because sequences are lists. So, if you send a list (without telling me to put it anywhere) we are just going to run it. If we get an error, we stop, but that's also a value.
